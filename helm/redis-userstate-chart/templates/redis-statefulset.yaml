apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis
spec:
  serviceName: redis-userstate-service
  replicas: {{ .Values.numRedisReplicasTotal }}
  selector:
    matchLabels:
      app: redis-userstate
  template:
    metadata:
      labels:
        app: redis-userstate
    spec:
      initContainers:
      - name: bootstrap-redis
        image: "redis:{{ .Values.redisVersion }}"
        command: [ "sh", "-c" ]
        args:
          - |
            #!/bin/bash

            NUM_PODS_PER_MASTER_GROUP=$(( $NUM_REDIS_SLAVES_PER_MASTER + 1 ))

            # Get the index of the current pod from its hostname (from hostname 'redis-0', 'redis-1', etc.)
            POD_INDEX=$(hostname | sed -e 's/[^0-9]//g')

            cp /tmp/redis/redis.conf /etc/redis/redis.conf

            echo "Finding master..."

            RETRY_COUNT=0
            MAX_RETRIES=5
            SENTINEL_READY=false

            while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
                if [ "$(redis-cli -h sentinel -p $REDIS_SENTINEL_PORT ping)" = "PONG" ]; then
                    SENTINEL_READY=true
                    break
                else
                    echo "Sentinel not responding, attempt $(($RETRY_COUNT + 1))/$MAX_RETRIES..."
                    RETRY_COUNT=$(( $RETRY_COUNT + 1 ))
                    sleep 2
                fi
            done

            if [ "$SENTINEL_READY" = true ]; then
                echo "Sentinel found, finding master via Sentinel..."

                if [ $(( $POD_INDEX % $NUM_PODS_PER_MASTER_GROUP )) -eq 0 ]; then
                    echo "This is pod redis-$POD_INDEX and it's a Master, no replicaof line needed."
                else
                    MASTER_GROUP_INDEX=$(( $POD_INDEX / $NUM_PODS_PER_MASTER_GROUP ))
                    MASTER_GROUP_NAME="mymaster-$MASTER_GROUP_INDEX"

                    # Extract either master IP or DNS name, depending on which redis-cli returns
                    MASTER=$(
                        redis-cli -h sentinel -p $REDIS_SENTINEL_PORT \
                        sentinel get-master-addr-by-name $MASTER_GROUP_NAME \
                        | grep -E '(^redis-\d{1,})|([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3})'
                    )

                    MASTER_INDEX=$(( ($POD_INDEX / $NUM_PODS_PER_MASTER_GROUP) * $NUM_PODS_PER_MASTER_GROUP ))
                    echo "This is pod redis-$POD_INDEX, a replica of redis-$MASTER_INDEX, updating redis.conf..."
                    echo "replicaof $MASTER $REDIS_PORT" >> /etc/redis/redis.conf
                fi

            else
                # First time deploying cluster (or network issue)
                echo "Sentinel not found after $MAX_RETRIES attempts, determining master manually..."

                # Check if this pod is a master
                if [ $(( $POD_INDEX % $NUM_PODS_PER_MASTER_GROUP )) -eq 0 ]; then
                    echo "This is pod redis-$POD_INDEX and it's a Master, no replicaof line needed"
                else
                    # This pod is a replica, determine its master
                    
                    MASTER_INDEX=$(( ($POD_INDEX / $NUM_PODS_PER_MASTER_GROUP) * $NUM_PODS_PER_MASTER_GROUP ))
                    MASTER_FQDN=$(hostname -f | sed -e "s/redis-[0-9]\./redis-${MASTER_INDEX}./")
                    
                    echo "This is pod redis-$POD_INDEX, a replica of redis-$MASTER_INDEX (FQDN: $MASTER_FQDN), updating redis.conf..."
                    echo "replicaof $MASTER_FQDN $REDIS_PORT" >> /etc/redis/redis.conf
                fi
            fi
        env:
        - name: REDIS_PORT
          value: "{{ .Values.redisPort }}"
        - name: REDIS_SENTINEL_PORT
          value: "{{ .Values.redisSentinelPort }}"
        - name: NUM_REDIS_SLAVES_PER_MASTER
          value: "{{ .Values.numRedisSlavesPerMaster }}"
        volumeMounts:
        - name: redis-userstate-config
          mountPath: /tmp/redis/
        - name: writable-config
          mountPath: /etc/redis/
      containers:
      - name: redis
        image: "redis:{{ .Values.redisVersion }}"
        command: ["redis-server"]
        args: ["/etc/redis/redis.conf"]
        ports:
        - containerPort: {{ .Values.redisPort }}
          name: redis
        volumeMounts:
        - name: userstate-data
          mountPath: /data
        - name: writable-config
          mountPath: /etc/redis/
      volumes:
      - name: redis-userstate-config
        configMap:
          name: redis-userstate-config
      - name: writable-config
        emptyDir: {}  # for writing
  volumeClaimTemplates:
  - metadata:
      name: userstate-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: "gp2"
      resources:
        requests:
          storage: {{ .Values.redisStorageSize }}
---
apiVersion: v1
kind: Service
metadata:
  name: redis-userstate-service
spec:
  clusterIP: None  # this makes it a headless service
  selector:
    app: redis-userstate
  ports:
  - port: {{ .Values.redisPort }}
    targetPort: {{ .Values.redisPort }}
    name: redis
